name: CI-CD

on: push

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.0'
          cache: 'pip'

      - name: Install Packages
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: DVC Pull
        run: |
          dvc pull

      - name: Run Appllication
        run: |
          nohup streamlit run app.py --server.port 8000 &
          sleep 30 

      - name: Test App
        run: |
          pytest tests/test_app.py
      
      - name: Stop Streamlit app
        run: |
          pkill -f "streamlit run"
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build, Tag, and Push Docker Image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ secrets.ECR_REPOSITORY_URI }}
          IMAGE_TAG: latest
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
      
      - name: ZIP Files for Deployment
        if: success()
        run: |
          zip -r deployment.zip appspec.yml deploy/scripts/install_dependencies.sh deploy/scripts/start_docker.sh
      
      - name: Upload ZIP to S3
        if: success()
        run: |
          aws s3 cp deployment.zip s3://spotify-recommender-deployment/deployment.zip
      
      - name: Deploy to AWS CodeDeploy
        if: success()
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws deploy create-deployment \
          --application-name spotify_recommender \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name spotify_recommender_deployment_group \
          --s3-location bucket=spotify-recommender-deployment,key=deployment.zip,bundleType=zip \
          --file-exists-behavior OVERWRITE \
          --region us-east-2
